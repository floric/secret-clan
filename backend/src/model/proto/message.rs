// This file is generated by rust-protobuf 2.20.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `message.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_20_0;

#[derive(PartialEq,Clone,Default)]
pub struct Client {
    // message oneof groups
    pub message: ::std::option::Option<Client_oneof_message>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Client {
    fn default() -> &'a Client {
        <Client as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Client_oneof_message {
    authConfirmed(Client_AuthConfirmed),
    nameUpdated(Client_NameUpdated),
}

impl Client {
    pub fn new() -> Client {
        ::std::default::Default::default()
    }

    // .Client.AuthConfirmed authConfirmed = 1;


    pub fn get_authConfirmed(&self) -> &Client_AuthConfirmed {
        match self.message {
            ::std::option::Option::Some(Client_oneof_message::authConfirmed(ref v)) => v,
            _ => <Client_AuthConfirmed as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_authConfirmed(&mut self) {
        self.message = ::std::option::Option::None;
    }

    pub fn has_authConfirmed(&self) -> bool {
        match self.message {
            ::std::option::Option::Some(Client_oneof_message::authConfirmed(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_authConfirmed(&mut self, v: Client_AuthConfirmed) {
        self.message = ::std::option::Option::Some(Client_oneof_message::authConfirmed(v))
    }

    // Mutable pointer to the field.
    pub fn mut_authConfirmed(&mut self) -> &mut Client_AuthConfirmed {
        if let ::std::option::Option::Some(Client_oneof_message::authConfirmed(_)) = self.message {
        } else {
            self.message = ::std::option::Option::Some(Client_oneof_message::authConfirmed(Client_AuthConfirmed::new()));
        }
        match self.message {
            ::std::option::Option::Some(Client_oneof_message::authConfirmed(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_authConfirmed(&mut self) -> Client_AuthConfirmed {
        if self.has_authConfirmed() {
            match self.message.take() {
                ::std::option::Option::Some(Client_oneof_message::authConfirmed(v)) => v,
                _ => panic!(),
            }
        } else {
            Client_AuthConfirmed::new()
        }
    }

    // .Client.NameUpdated nameUpdated = 2;


    pub fn get_nameUpdated(&self) -> &Client_NameUpdated {
        match self.message {
            ::std::option::Option::Some(Client_oneof_message::nameUpdated(ref v)) => v,
            _ => <Client_NameUpdated as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_nameUpdated(&mut self) {
        self.message = ::std::option::Option::None;
    }

    pub fn has_nameUpdated(&self) -> bool {
        match self.message {
            ::std::option::Option::Some(Client_oneof_message::nameUpdated(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_nameUpdated(&mut self, v: Client_NameUpdated) {
        self.message = ::std::option::Option::Some(Client_oneof_message::nameUpdated(v))
    }

    // Mutable pointer to the field.
    pub fn mut_nameUpdated(&mut self) -> &mut Client_NameUpdated {
        if let ::std::option::Option::Some(Client_oneof_message::nameUpdated(_)) = self.message {
        } else {
            self.message = ::std::option::Option::Some(Client_oneof_message::nameUpdated(Client_NameUpdated::new()));
        }
        match self.message {
            ::std::option::Option::Some(Client_oneof_message::nameUpdated(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_nameUpdated(&mut self) -> Client_NameUpdated {
        if self.has_nameUpdated() {
            match self.message.take() {
                ::std::option::Option::Some(Client_oneof_message::nameUpdated(v)) => v,
                _ => panic!(),
            }
        } else {
            Client_NameUpdated::new()
        }
    }
}

impl ::protobuf::Message for Client {
    fn is_initialized(&self) -> bool {
        if let Some(Client_oneof_message::authConfirmed(ref v)) = self.message {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Client_oneof_message::nameUpdated(ref v)) = self.message {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message = ::std::option::Option::Some(Client_oneof_message::authConfirmed(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message = ::std::option::Option::Some(Client_oneof_message::nameUpdated(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.message {
            match v {
                &Client_oneof_message::authConfirmed(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Client_oneof_message::nameUpdated(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.message {
            match v {
                &Client_oneof_message::authConfirmed(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Client_oneof_message::nameUpdated(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Client {
        Client::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Client_AuthConfirmed>(
                "authConfirmed",
                Client::has_authConfirmed,
                Client::get_authConfirmed,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Client_NameUpdated>(
                "nameUpdated",
                Client::has_nameUpdated,
                Client::get_nameUpdated,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Client>(
                "Client",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Client {
        static instance: ::protobuf::rt::LazyV2<Client> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Client::new)
    }
}

impl ::protobuf::Clear for Client {
    fn clear(&mut self) {
        self.message = ::std::option::Option::None;
        self.message = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Client {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Client {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Client_AuthConfirmed {
    // message fields
    pub token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Client_AuthConfirmed {
    fn default() -> &'a Client_AuthConfirmed {
        <Client_AuthConfirmed as ::protobuf::Message>::default_instance()
    }
}

impl Client_AuthConfirmed {
    pub fn new() -> Client_AuthConfirmed {
        ::std::default::Default::default()
    }

    // string token = 1;


    pub fn get_token(&self) -> &str {
        &self.token
    }
    pub fn clear_token(&mut self) {
        self.token.clear();
    }

    // Param is passed by value, moved
    pub fn set_token(&mut self, v: ::std::string::String) {
        self.token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token(&mut self) -> &mut ::std::string::String {
        &mut self.token
    }

    // Take field
    pub fn take_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Client_AuthConfirmed {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.token.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.token.is_empty() {
            os.write_string(1, &self.token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Client_AuthConfirmed {
        Client_AuthConfirmed::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "token",
                |m: &Client_AuthConfirmed| { &m.token },
                |m: &mut Client_AuthConfirmed| { &mut m.token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Client_AuthConfirmed>(
                "Client.AuthConfirmed",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Client_AuthConfirmed {
        static instance: ::protobuf::rt::LazyV2<Client_AuthConfirmed> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Client_AuthConfirmed::new)
    }
}

impl ::protobuf::Clear for Client_AuthConfirmed {
    fn clear(&mut self) {
        self.token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Client_AuthConfirmed {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Client_AuthConfirmed {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Client_NameUpdated {
    // message fields
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Client_NameUpdated {
    fn default() -> &'a Client_NameUpdated {
        <Client_NameUpdated as ::protobuf::Message>::default_instance()
    }
}

impl Client_NameUpdated {
    pub fn new() -> Client_NameUpdated {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Client_NameUpdated {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Client_NameUpdated {
        Client_NameUpdated::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Client_NameUpdated| { &m.name },
                |m: &mut Client_NameUpdated| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Client_NameUpdated>(
                "Client.NameUpdated",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Client_NameUpdated {
        static instance: ::protobuf::rt::LazyV2<Client_NameUpdated> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Client_NameUpdated::new)
    }
}

impl ::protobuf::Clear for Client_NameUpdated {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Client_NameUpdated {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Client_NameUpdated {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Server {
    // message oneof groups
    pub message: ::std::option::Option<Server_oneof_message>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Server {
    fn default() -> &'a Server {
        <Server as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Server_oneof_message {
    newTask(Server_NewTask),
    playerUpdated(Server_PlayerUpdated),
    gameUpdated(Server_GameUpdated),
    selfUpdated(Server_SelfUpdated),
}

impl Server {
    pub fn new() -> Server {
        ::std::default::Default::default()
    }

    // .Server.NewTask newTask = 1;


    pub fn get_newTask(&self) -> &Server_NewTask {
        match self.message {
            ::std::option::Option::Some(Server_oneof_message::newTask(ref v)) => v,
            _ => <Server_NewTask as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_newTask(&mut self) {
        self.message = ::std::option::Option::None;
    }

    pub fn has_newTask(&self) -> bool {
        match self.message {
            ::std::option::Option::Some(Server_oneof_message::newTask(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_newTask(&mut self, v: Server_NewTask) {
        self.message = ::std::option::Option::Some(Server_oneof_message::newTask(v))
    }

    // Mutable pointer to the field.
    pub fn mut_newTask(&mut self) -> &mut Server_NewTask {
        if let ::std::option::Option::Some(Server_oneof_message::newTask(_)) = self.message {
        } else {
            self.message = ::std::option::Option::Some(Server_oneof_message::newTask(Server_NewTask::new()));
        }
        match self.message {
            ::std::option::Option::Some(Server_oneof_message::newTask(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_newTask(&mut self) -> Server_NewTask {
        if self.has_newTask() {
            match self.message.take() {
                ::std::option::Option::Some(Server_oneof_message::newTask(v)) => v,
                _ => panic!(),
            }
        } else {
            Server_NewTask::new()
        }
    }

    // .Server.PlayerUpdated playerUpdated = 2;


    pub fn get_playerUpdated(&self) -> &Server_PlayerUpdated {
        match self.message {
            ::std::option::Option::Some(Server_oneof_message::playerUpdated(ref v)) => v,
            _ => <Server_PlayerUpdated as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_playerUpdated(&mut self) {
        self.message = ::std::option::Option::None;
    }

    pub fn has_playerUpdated(&self) -> bool {
        match self.message {
            ::std::option::Option::Some(Server_oneof_message::playerUpdated(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_playerUpdated(&mut self, v: Server_PlayerUpdated) {
        self.message = ::std::option::Option::Some(Server_oneof_message::playerUpdated(v))
    }

    // Mutable pointer to the field.
    pub fn mut_playerUpdated(&mut self) -> &mut Server_PlayerUpdated {
        if let ::std::option::Option::Some(Server_oneof_message::playerUpdated(_)) = self.message {
        } else {
            self.message = ::std::option::Option::Some(Server_oneof_message::playerUpdated(Server_PlayerUpdated::new()));
        }
        match self.message {
            ::std::option::Option::Some(Server_oneof_message::playerUpdated(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_playerUpdated(&mut self) -> Server_PlayerUpdated {
        if self.has_playerUpdated() {
            match self.message.take() {
                ::std::option::Option::Some(Server_oneof_message::playerUpdated(v)) => v,
                _ => panic!(),
            }
        } else {
            Server_PlayerUpdated::new()
        }
    }

    // .Server.GameUpdated gameUpdated = 3;


    pub fn get_gameUpdated(&self) -> &Server_GameUpdated {
        match self.message {
            ::std::option::Option::Some(Server_oneof_message::gameUpdated(ref v)) => v,
            _ => <Server_GameUpdated as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_gameUpdated(&mut self) {
        self.message = ::std::option::Option::None;
    }

    pub fn has_gameUpdated(&self) -> bool {
        match self.message {
            ::std::option::Option::Some(Server_oneof_message::gameUpdated(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_gameUpdated(&mut self, v: Server_GameUpdated) {
        self.message = ::std::option::Option::Some(Server_oneof_message::gameUpdated(v))
    }

    // Mutable pointer to the field.
    pub fn mut_gameUpdated(&mut self) -> &mut Server_GameUpdated {
        if let ::std::option::Option::Some(Server_oneof_message::gameUpdated(_)) = self.message {
        } else {
            self.message = ::std::option::Option::Some(Server_oneof_message::gameUpdated(Server_GameUpdated::new()));
        }
        match self.message {
            ::std::option::Option::Some(Server_oneof_message::gameUpdated(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_gameUpdated(&mut self) -> Server_GameUpdated {
        if self.has_gameUpdated() {
            match self.message.take() {
                ::std::option::Option::Some(Server_oneof_message::gameUpdated(v)) => v,
                _ => panic!(),
            }
        } else {
            Server_GameUpdated::new()
        }
    }

    // .Server.SelfUpdated selfUpdated = 4;


    pub fn get_selfUpdated(&self) -> &Server_SelfUpdated {
        match self.message {
            ::std::option::Option::Some(Server_oneof_message::selfUpdated(ref v)) => v,
            _ => <Server_SelfUpdated as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_selfUpdated(&mut self) {
        self.message = ::std::option::Option::None;
    }

    pub fn has_selfUpdated(&self) -> bool {
        match self.message {
            ::std::option::Option::Some(Server_oneof_message::selfUpdated(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_selfUpdated(&mut self, v: Server_SelfUpdated) {
        self.message = ::std::option::Option::Some(Server_oneof_message::selfUpdated(v))
    }

    // Mutable pointer to the field.
    pub fn mut_selfUpdated(&mut self) -> &mut Server_SelfUpdated {
        if let ::std::option::Option::Some(Server_oneof_message::selfUpdated(_)) = self.message {
        } else {
            self.message = ::std::option::Option::Some(Server_oneof_message::selfUpdated(Server_SelfUpdated::new()));
        }
        match self.message {
            ::std::option::Option::Some(Server_oneof_message::selfUpdated(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_selfUpdated(&mut self) -> Server_SelfUpdated {
        if self.has_selfUpdated() {
            match self.message.take() {
                ::std::option::Option::Some(Server_oneof_message::selfUpdated(v)) => v,
                _ => panic!(),
            }
        } else {
            Server_SelfUpdated::new()
        }
    }
}

impl ::protobuf::Message for Server {
    fn is_initialized(&self) -> bool {
        if let Some(Server_oneof_message::newTask(ref v)) = self.message {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Server_oneof_message::playerUpdated(ref v)) = self.message {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Server_oneof_message::gameUpdated(ref v)) = self.message {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Server_oneof_message::selfUpdated(ref v)) = self.message {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message = ::std::option::Option::Some(Server_oneof_message::newTask(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message = ::std::option::Option::Some(Server_oneof_message::playerUpdated(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message = ::std::option::Option::Some(Server_oneof_message::gameUpdated(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message = ::std::option::Option::Some(Server_oneof_message::selfUpdated(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.message {
            match v {
                &Server_oneof_message::newTask(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Server_oneof_message::playerUpdated(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Server_oneof_message::gameUpdated(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Server_oneof_message::selfUpdated(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.message {
            match v {
                &Server_oneof_message::newTask(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Server_oneof_message::playerUpdated(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Server_oneof_message::gameUpdated(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Server_oneof_message::selfUpdated(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Server {
        Server::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Server_NewTask>(
                "newTask",
                Server::has_newTask,
                Server::get_newTask,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Server_PlayerUpdated>(
                "playerUpdated",
                Server::has_playerUpdated,
                Server::get_playerUpdated,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Server_GameUpdated>(
                "gameUpdated",
                Server::has_gameUpdated,
                Server::get_gameUpdated,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Server_SelfUpdated>(
                "selfUpdated",
                Server::has_selfUpdated,
                Server::get_selfUpdated,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Server>(
                "Server",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Server {
        static instance: ::protobuf::rt::LazyV2<Server> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Server::new)
    }
}

impl ::protobuf::Clear for Server {
    fn clear(&mut self) {
        self.message = ::std::option::Option::None;
        self.message = ::std::option::Option::None;
        self.message = ::std::option::Option::None;
        self.message = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Server {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Server {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Server_NewTask {
    // message fields
    pub task: ::protobuf::SingularPtrField<super::task::Task>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Server_NewTask {
    fn default() -> &'a Server_NewTask {
        <Server_NewTask as ::protobuf::Message>::default_instance()
    }
}

impl Server_NewTask {
    pub fn new() -> Server_NewTask {
        ::std::default::Default::default()
    }

    // .Task task = 1;


    pub fn get_task(&self) -> &super::task::Task {
        self.task.as_ref().unwrap_or_else(|| <super::task::Task as ::protobuf::Message>::default_instance())
    }
    pub fn clear_task(&mut self) {
        self.task.clear();
    }

    pub fn has_task(&self) -> bool {
        self.task.is_some()
    }

    // Param is passed by value, moved
    pub fn set_task(&mut self, v: super::task::Task) {
        self.task = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_task(&mut self) -> &mut super::task::Task {
        if self.task.is_none() {
            self.task.set_default();
        }
        self.task.as_mut().unwrap()
    }

    // Take field
    pub fn take_task(&mut self) -> super::task::Task {
        self.task.take().unwrap_or_else(|| super::task::Task::new())
    }
}

impl ::protobuf::Message for Server_NewTask {
    fn is_initialized(&self) -> bool {
        for v in &self.task {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.task)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.task.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.task.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Server_NewTask {
        Server_NewTask::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::task::Task>>(
                "task",
                |m: &Server_NewTask| { &m.task },
                |m: &mut Server_NewTask| { &mut m.task },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Server_NewTask>(
                "Server.NewTask",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Server_NewTask {
        static instance: ::protobuf::rt::LazyV2<Server_NewTask> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Server_NewTask::new)
    }
}

impl ::protobuf::Clear for Server_NewTask {
    fn clear(&mut self) {
        self.task.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Server_NewTask {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Server_NewTask {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Server_PlayerUpdated {
    // message fields
    pub player: ::protobuf::SingularPtrField<super::player::Player>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Server_PlayerUpdated {
    fn default() -> &'a Server_PlayerUpdated {
        <Server_PlayerUpdated as ::protobuf::Message>::default_instance()
    }
}

impl Server_PlayerUpdated {
    pub fn new() -> Server_PlayerUpdated {
        ::std::default::Default::default()
    }

    // .Player player = 1;


    pub fn get_player(&self) -> &super::player::Player {
        self.player.as_ref().unwrap_or_else(|| <super::player::Player as ::protobuf::Message>::default_instance())
    }
    pub fn clear_player(&mut self) {
        self.player.clear();
    }

    pub fn has_player(&self) -> bool {
        self.player.is_some()
    }

    // Param is passed by value, moved
    pub fn set_player(&mut self, v: super::player::Player) {
        self.player = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_player(&mut self) -> &mut super::player::Player {
        if self.player.is_none() {
            self.player.set_default();
        }
        self.player.as_mut().unwrap()
    }

    // Take field
    pub fn take_player(&mut self) -> super::player::Player {
        self.player.take().unwrap_or_else(|| super::player::Player::new())
    }
}

impl ::protobuf::Message for Server_PlayerUpdated {
    fn is_initialized(&self) -> bool {
        for v in &self.player {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.player)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.player.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.player.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Server_PlayerUpdated {
        Server_PlayerUpdated::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::player::Player>>(
                "player",
                |m: &Server_PlayerUpdated| { &m.player },
                |m: &mut Server_PlayerUpdated| { &mut m.player },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Server_PlayerUpdated>(
                "Server.PlayerUpdated",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Server_PlayerUpdated {
        static instance: ::protobuf::rt::LazyV2<Server_PlayerUpdated> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Server_PlayerUpdated::new)
    }
}

impl ::protobuf::Clear for Server_PlayerUpdated {
    fn clear(&mut self) {
        self.player.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Server_PlayerUpdated {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Server_PlayerUpdated {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Server_SelfUpdated {
    // message fields
    pub player: ::protobuf::SingularPtrField<super::player::OwnPlayer>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Server_SelfUpdated {
    fn default() -> &'a Server_SelfUpdated {
        <Server_SelfUpdated as ::protobuf::Message>::default_instance()
    }
}

impl Server_SelfUpdated {
    pub fn new() -> Server_SelfUpdated {
        ::std::default::Default::default()
    }

    // .OwnPlayer player = 1;


    pub fn get_player(&self) -> &super::player::OwnPlayer {
        self.player.as_ref().unwrap_or_else(|| <super::player::OwnPlayer as ::protobuf::Message>::default_instance())
    }
    pub fn clear_player(&mut self) {
        self.player.clear();
    }

    pub fn has_player(&self) -> bool {
        self.player.is_some()
    }

    // Param is passed by value, moved
    pub fn set_player(&mut self, v: super::player::OwnPlayer) {
        self.player = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_player(&mut self) -> &mut super::player::OwnPlayer {
        if self.player.is_none() {
            self.player.set_default();
        }
        self.player.as_mut().unwrap()
    }

    // Take field
    pub fn take_player(&mut self) -> super::player::OwnPlayer {
        self.player.take().unwrap_or_else(|| super::player::OwnPlayer::new())
    }
}

impl ::protobuf::Message for Server_SelfUpdated {
    fn is_initialized(&self) -> bool {
        for v in &self.player {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.player)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.player.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.player.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Server_SelfUpdated {
        Server_SelfUpdated::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::player::OwnPlayer>>(
                "player",
                |m: &Server_SelfUpdated| { &m.player },
                |m: &mut Server_SelfUpdated| { &mut m.player },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Server_SelfUpdated>(
                "Server.SelfUpdated",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Server_SelfUpdated {
        static instance: ::protobuf::rt::LazyV2<Server_SelfUpdated> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Server_SelfUpdated::new)
    }
}

impl ::protobuf::Clear for Server_SelfUpdated {
    fn clear(&mut self) {
        self.player.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Server_SelfUpdated {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Server_SelfUpdated {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Server_GameUpdated {
    // message fields
    pub game: ::protobuf::SingularPtrField<super::game::Game>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Server_GameUpdated {
    fn default() -> &'a Server_GameUpdated {
        <Server_GameUpdated as ::protobuf::Message>::default_instance()
    }
}

impl Server_GameUpdated {
    pub fn new() -> Server_GameUpdated {
        ::std::default::Default::default()
    }

    // .Game game = 1;


    pub fn get_game(&self) -> &super::game::Game {
        self.game.as_ref().unwrap_or_else(|| <super::game::Game as ::protobuf::Message>::default_instance())
    }
    pub fn clear_game(&mut self) {
        self.game.clear();
    }

    pub fn has_game(&self) -> bool {
        self.game.is_some()
    }

    // Param is passed by value, moved
    pub fn set_game(&mut self, v: super::game::Game) {
        self.game = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_game(&mut self) -> &mut super::game::Game {
        if self.game.is_none() {
            self.game.set_default();
        }
        self.game.as_mut().unwrap()
    }

    // Take field
    pub fn take_game(&mut self) -> super::game::Game {
        self.game.take().unwrap_or_else(|| super::game::Game::new())
    }
}

impl ::protobuf::Message for Server_GameUpdated {
    fn is_initialized(&self) -> bool {
        for v in &self.game {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.game)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.game.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.game.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Server_GameUpdated {
        Server_GameUpdated::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::game::Game>>(
                "game",
                |m: &Server_GameUpdated| { &m.game },
                |m: &mut Server_GameUpdated| { &mut m.game },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Server_GameUpdated>(
                "Server.GameUpdated",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Server_GameUpdated {
        static instance: ::protobuf::rt::LazyV2<Server_GameUpdated> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Server_GameUpdated::new)
    }
}

impl ::protobuf::Clear for Server_GameUpdated {
    fn clear(&mut self) {
        self.game.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Server_GameUpdated {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Server_GameUpdated {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rmessage.proto\x1a\ntask.proto\x1a\x0cplayer.proto\x1a\ngame.proto\"\
    \xd5\x01\n\x06Client\x12=\n\rauthConfirmed\x18\x01\x20\x01(\x0b2\x15.Cli\
    ent.AuthConfirmedH\0R\rauthConfirmed\x127\n\x0bnameUpdated\x18\x02\x20\
    \x01(\x0b2\x13.Client.NameUpdatedH\0R\x0bnameUpdated\x1a%\n\rAuthConfirm\
    ed\x12\x14\n\x05token\x18\x01\x20\x01(\tR\x05token\x1a!\n\x0bNameUpdated\
    \x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04nameB\t\n\x07message\"\xa6\x03\
    \n\x06Server\x12+\n\x07newTask\x18\x01\x20\x01(\x0b2\x0f.Server.NewTaskH\
    \0R\x07newTask\x12=\n\rplayerUpdated\x18\x02\x20\x01(\x0b2\x15.Server.Pl\
    ayerUpdatedH\0R\rplayerUpdated\x127\n\x0bgameUpdated\x18\x03\x20\x01(\
    \x0b2\x13.Server.GameUpdatedH\0R\x0bgameUpdated\x127\n\x0bselfUpdated\
    \x18\x04\x20\x01(\x0b2\x13.Server.SelfUpdatedH\0R\x0bselfUpdated\x1a$\n\
    \x07NewTask\x12\x19\n\x04task\x18\x01\x20\x01(\x0b2\x05.TaskR\x04task\
    \x1a0\n\rPlayerUpdated\x12\x1f\n\x06player\x18\x01\x20\x01(\x0b2\x07.Pla\
    yerR\x06player\x1a1\n\x0bSelfUpdated\x12\"\n\x06player\x18\x01\x20\x01(\
    \x0b2\n.OwnPlayerR\x06player\x1a(\n\x0bGameUpdated\x12\x19\n\x04game\x18\
    \x01\x20\x01(\x0b2\x05.GameR\x04gameB\t\n\x07messageb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
