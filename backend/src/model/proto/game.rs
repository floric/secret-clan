// This file is generated by rust-protobuf 2.20.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `game.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_20_0;

#[derive(PartialEq,Clone,Default)]
pub struct Game {
    // message fields
    pub token: ::std::string::String,
    pub admin_id: ::std::string::String,
    pub state: Game_State,
    pub pot: u32,
    pub cards: ::protobuf::RepeatedField<super::card::Card>,
    pub small_blind_id: ::std::string::String,
    pub big_blind_id: ::std::string::String,
    pub blind: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Game {
    fn default() -> &'a Game {
        <Game as ::protobuf::Message>::default_instance()
    }
}

impl Game {
    pub fn new() -> Game {
        ::std::default::Default::default()
    }

    // string token = 1;


    pub fn get_token(&self) -> &str {
        &self.token
    }
    pub fn clear_token(&mut self) {
        self.token.clear();
    }

    // Param is passed by value, moved
    pub fn set_token(&mut self, v: ::std::string::String) {
        self.token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token(&mut self) -> &mut ::std::string::String {
        &mut self.token
    }

    // Take field
    pub fn take_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.token, ::std::string::String::new())
    }

    // string admin_id = 2;


    pub fn get_admin_id(&self) -> &str {
        &self.admin_id
    }
    pub fn clear_admin_id(&mut self) {
        self.admin_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_admin_id(&mut self, v: ::std::string::String) {
        self.admin_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_admin_id(&mut self) -> &mut ::std::string::String {
        &mut self.admin_id
    }

    // Take field
    pub fn take_admin_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.admin_id, ::std::string::String::new())
    }

    // .Game.State state = 3;


    pub fn get_state(&self) -> Game_State {
        self.state
    }
    pub fn clear_state(&mut self) {
        self.state = Game_State::INITIALIZED;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: Game_State) {
        self.state = v;
    }

    // uint32 pot = 4;


    pub fn get_pot(&self) -> u32 {
        self.pot
    }
    pub fn clear_pot(&mut self) {
        self.pot = 0;
    }

    // Param is passed by value, moved
    pub fn set_pot(&mut self, v: u32) {
        self.pot = v;
    }

    // repeated .Card cards = 5;


    pub fn get_cards(&self) -> &[super::card::Card] {
        &self.cards
    }
    pub fn clear_cards(&mut self) {
        self.cards.clear();
    }

    // Param is passed by value, moved
    pub fn set_cards(&mut self, v: ::protobuf::RepeatedField<super::card::Card>) {
        self.cards = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cards(&mut self) -> &mut ::protobuf::RepeatedField<super::card::Card> {
        &mut self.cards
    }

    // Take field
    pub fn take_cards(&mut self) -> ::protobuf::RepeatedField<super::card::Card> {
        ::std::mem::replace(&mut self.cards, ::protobuf::RepeatedField::new())
    }

    // string small_blind_id = 6;


    pub fn get_small_blind_id(&self) -> &str {
        &self.small_blind_id
    }
    pub fn clear_small_blind_id(&mut self) {
        self.small_blind_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_small_blind_id(&mut self, v: ::std::string::String) {
        self.small_blind_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_small_blind_id(&mut self) -> &mut ::std::string::String {
        &mut self.small_blind_id
    }

    // Take field
    pub fn take_small_blind_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.small_blind_id, ::std::string::String::new())
    }

    // string big_blind_id = 7;


    pub fn get_big_blind_id(&self) -> &str {
        &self.big_blind_id
    }
    pub fn clear_big_blind_id(&mut self) {
        self.big_blind_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_big_blind_id(&mut self, v: ::std::string::String) {
        self.big_blind_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_big_blind_id(&mut self) -> &mut ::std::string::String {
        &mut self.big_blind_id
    }

    // Take field
    pub fn take_big_blind_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.big_blind_id, ::std::string::String::new())
    }

    // uint32 blind = 8;


    pub fn get_blind(&self) -> u32 {
        self.blind
    }
    pub fn clear_blind(&mut self) {
        self.blind = 0;
    }

    // Param is passed by value, moved
    pub fn set_blind(&mut self, v: u32) {
        self.blind = v;
    }
}

impl ::protobuf::Message for Game {
    fn is_initialized(&self) -> bool {
        for v in &self.cards {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.token)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.admin_id)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.state, 3, &mut self.unknown_fields)?
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.pot = tmp;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cards)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.small_blind_id)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.big_blind_id)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.blind = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.token.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.token);
        }
        if !self.admin_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.admin_id);
        }
        if self.state != Game_State::INITIALIZED {
            my_size += ::protobuf::rt::enum_size(3, self.state);
        }
        if self.pot != 0 {
            my_size += ::protobuf::rt::value_size(4, self.pot, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.cards {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.small_blind_id.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.small_blind_id);
        }
        if !self.big_blind_id.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.big_blind_id);
        }
        if self.blind != 0 {
            my_size += ::protobuf::rt::value_size(8, self.blind, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.token.is_empty() {
            os.write_string(1, &self.token)?;
        }
        if !self.admin_id.is_empty() {
            os.write_string(2, &self.admin_id)?;
        }
        if self.state != Game_State::INITIALIZED {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.state))?;
        }
        if self.pot != 0 {
            os.write_uint32(4, self.pot)?;
        }
        for v in &self.cards {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.small_blind_id.is_empty() {
            os.write_string(6, &self.small_blind_id)?;
        }
        if !self.big_blind_id.is_empty() {
            os.write_string(7, &self.big_blind_id)?;
        }
        if self.blind != 0 {
            os.write_uint32(8, self.blind)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Game {
        Game::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "token",
                |m: &Game| { &m.token },
                |m: &mut Game| { &mut m.token },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "admin_id",
                |m: &Game| { &m.admin_id },
                |m: &mut Game| { &mut m.admin_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Game_State>>(
                "state",
                |m: &Game| { &m.state },
                |m: &mut Game| { &mut m.state },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "pot",
                |m: &Game| { &m.pot },
                |m: &mut Game| { &mut m.pot },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::card::Card>>(
                "cards",
                |m: &Game| { &m.cards },
                |m: &mut Game| { &mut m.cards },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "small_blind_id",
                |m: &Game| { &m.small_blind_id },
                |m: &mut Game| { &mut m.small_blind_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "big_blind_id",
                |m: &Game| { &m.big_blind_id },
                |m: &mut Game| { &mut m.big_blind_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "blind",
                |m: &Game| { &m.blind },
                |m: &mut Game| { &mut m.blind },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Game>(
                "Game",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Game {
        static instance: ::protobuf::rt::LazyV2<Game> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Game::new)
    }
}

impl ::protobuf::Clear for Game {
    fn clear(&mut self) {
        self.token.clear();
        self.admin_id.clear();
        self.state = Game_State::INITIALIZED;
        self.pot = 0;
        self.cards.clear();
        self.small_blind_id.clear();
        self.big_blind_id.clear();
        self.blind = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Game {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Game {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Game_State {
    INITIALIZED = 0,
    STARTED = 1,
    ABANDONED = 2,
}

impl ::protobuf::ProtobufEnum for Game_State {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Game_State> {
        match value {
            0 => ::std::option::Option::Some(Game_State::INITIALIZED),
            1 => ::std::option::Option::Some(Game_State::STARTED),
            2 => ::std::option::Option::Some(Game_State::ABANDONED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Game_State] = &[
            Game_State::INITIALIZED,
            Game_State::STARTED,
            Game_State::ABANDONED,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Game_State>("Game.State", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Game_State {
}

impl ::std::default::Default for Game_State {
    fn default() -> Self {
        Game_State::INITIALIZED
    }
}

impl ::protobuf::reflect::ProtobufValue for Game_State {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\ngame.proto\x1a\ncard.proto\"\x9d\x02\n\x04Game\x12\x14\n\x05token\
    \x18\x01\x20\x01(\tR\x05token\x12\x19\n\x08admin_id\x18\x02\x20\x01(\tR\
    \x07adminId\x12!\n\x05state\x18\x03\x20\x01(\x0e2\x0b.Game.StateR\x05sta\
    te\x12\x10\n\x03pot\x18\x04\x20\x01(\rR\x03pot\x12\x1b\n\x05cards\x18\
    \x05\x20\x03(\x0b2\x05.CardR\x05cards\x12$\n\x0esmall_blind_id\x18\x06\
    \x20\x01(\tR\x0csmallBlindId\x12\x20\n\x0cbig_blind_id\x18\x07\x20\x01(\
    \tR\nbigBlindId\x12\x14\n\x05blind\x18\x08\x20\x01(\rR\x05blind\"4\n\x05\
    State\x12\x0f\n\x0bINITIALIZED\x10\0\x12\x0b\n\x07STARTED\x10\x01\x12\r\
    \n\tABANDONED\x10\x02J\xa4\x05\n\x06\x12\x04\0\0\x12\x01\n\x08\n\x01\x0c\
    \x12\x03\0\0\x12\n\t\n\x02\x03\0\x12\x03\x02\0\x14\n\n\n\x02\x04\0\x12\
    \x04\x04\0\x12\x01\n\n\n\x03\x04\0\x01\x12\x03\x04\x08\x0c\n\x0b\n\x04\
    \x04\0\x02\0\x12\x03\x05\x02\x13\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x05\
    \x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x05\t\x0e\n\x0c\n\x05\x04\0\
    \x02\0\x03\x12\x03\x05\x11\x12\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x06\x02\
    \x16\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x06\x02\x08\n\x0c\n\x05\x04\0\
    \x02\x01\x01\x12\x03\x06\t\x11\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x06\
    \x14\x15\n\x0c\n\x04\x04\0\x04\0\x12\x04\x07\x02\x0b\x03\n\x0c\n\x05\x04\
    \0\x04\0\x01\x12\x03\x07\x07\x0c\n\r\n\x06\x04\0\x04\0\x02\0\x12\x03\x08\
    \x04\x14\n\x0e\n\x07\x04\0\x04\0\x02\0\x01\x12\x03\x08\x04\x0f\n\x0e\n\
    \x07\x04\0\x04\0\x02\0\x02\x12\x03\x08\x12\x13\n\r\n\x06\x04\0\x04\0\x02\
    \x01\x12\x03\t\x04\x10\n\x0e\n\x07\x04\0\x04\0\x02\x01\x01\x12\x03\t\x04\
    \x0b\n\x0e\n\x07\x04\0\x04\0\x02\x01\x02\x12\x03\t\x0e\x0f\n\r\n\x06\x04\
    \0\x04\0\x02\x02\x12\x03\n\x04\x12\n\x0e\n\x07\x04\0\x04\0\x02\x02\x01\
    \x12\x03\n\x04\r\n\x0e\n\x07\x04\0\x04\0\x02\x02\x02\x12\x03\n\x10\x11\n\
    \x0b\n\x04\x04\0\x02\x02\x12\x03\x0c\x02\x12\n\x0c\n\x05\x04\0\x02\x02\
    \x06\x12\x03\x0c\x02\x07\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x0c\x08\r\
    \n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x0c\x10\x11\n\x0b\n\x04\x04\0\x02\
    \x03\x12\x03\r\x02\x11\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\r\x02\x08\n\
    \x0c\n\x05\x04\0\x02\x03\x01\x12\x03\r\t\x0c\n\x0c\n\x05\x04\0\x02\x03\
    \x03\x12\x03\r\x0f\x10\n\x0b\n\x04\x04\0\x02\x04\x12\x03\x0e\x02\x1a\n\
    \x0c\n\x05\x04\0\x02\x04\x04\x12\x03\x0e\x02\n\n\x0c\n\x05\x04\0\x02\x04\
    \x06\x12\x03\x0e\x0b\x0f\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\x0e\x10\
    \x15\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\x0e\x18\x19\n\x0b\n\x04\x04\0\
    \x02\x05\x12\x03\x0f\x02\x1c\n\x0c\n\x05\x04\0\x02\x05\x05\x12\x03\x0f\
    \x02\x08\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03\x0f\t\x17\n\x0c\n\x05\x04\
    \0\x02\x05\x03\x12\x03\x0f\x1a\x1b\n\x0b\n\x04\x04\0\x02\x06\x12\x03\x10\
    \x02\x1a\n\x0c\n\x05\x04\0\x02\x06\x05\x12\x03\x10\x02\x08\n\x0c\n\x05\
    \x04\0\x02\x06\x01\x12\x03\x10\t\x15\n\x0c\n\x05\x04\0\x02\x06\x03\x12\
    \x03\x10\x18\x19\n\x0b\n\x04\x04\0\x02\x07\x12\x03\x11\x02\x13\n\x0c\n\
    \x05\x04\0\x02\x07\x05\x12\x03\x11\x02\x08\n\x0c\n\x05\x04\0\x02\x07\x01\
    \x12\x03\x11\t\x0e\n\x0c\n\x05\x04\0\x02\x07\x03\x12\x03\x11\x11\x12b\
    \x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
