// This file is generated by rust-protobuf 2.20.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `task.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_20_0;

#[derive(PartialEq,Clone,Default)]
pub struct Task {
    // message oneof groups
    pub definition: ::std::option::Option<Task_oneof_definition>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Task {
    fn default() -> &'a Task {
        <Task as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Task_oneof_definition {
    settings(Task_Settings),
    discloseRole(Task_DiscloseRole),
    discuss(Task_Discuss),
    vote(Task_Vote),
}

impl Task {
    pub fn new() -> Task {
        ::std::default::Default::default()
    }

    // .Task.Settings settings = 1;


    pub fn get_settings(&self) -> &Task_Settings {
        match self.definition {
            ::std::option::Option::Some(Task_oneof_definition::settings(ref v)) => v,
            _ => <Task_Settings as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_settings(&mut self) {
        self.definition = ::std::option::Option::None;
    }

    pub fn has_settings(&self) -> bool {
        match self.definition {
            ::std::option::Option::Some(Task_oneof_definition::settings(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_settings(&mut self, v: Task_Settings) {
        self.definition = ::std::option::Option::Some(Task_oneof_definition::settings(v))
    }

    // Mutable pointer to the field.
    pub fn mut_settings(&mut self) -> &mut Task_Settings {
        if let ::std::option::Option::Some(Task_oneof_definition::settings(_)) = self.definition {
        } else {
            self.definition = ::std::option::Option::Some(Task_oneof_definition::settings(Task_Settings::new()));
        }
        match self.definition {
            ::std::option::Option::Some(Task_oneof_definition::settings(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_settings(&mut self) -> Task_Settings {
        if self.has_settings() {
            match self.definition.take() {
                ::std::option::Option::Some(Task_oneof_definition::settings(v)) => v,
                _ => panic!(),
            }
        } else {
            Task_Settings::new()
        }
    }

    // .Task.DiscloseRole discloseRole = 2;


    pub fn get_discloseRole(&self) -> &Task_DiscloseRole {
        match self.definition {
            ::std::option::Option::Some(Task_oneof_definition::discloseRole(ref v)) => v,
            _ => <Task_DiscloseRole as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_discloseRole(&mut self) {
        self.definition = ::std::option::Option::None;
    }

    pub fn has_discloseRole(&self) -> bool {
        match self.definition {
            ::std::option::Option::Some(Task_oneof_definition::discloseRole(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_discloseRole(&mut self, v: Task_DiscloseRole) {
        self.definition = ::std::option::Option::Some(Task_oneof_definition::discloseRole(v))
    }

    // Mutable pointer to the field.
    pub fn mut_discloseRole(&mut self) -> &mut Task_DiscloseRole {
        if let ::std::option::Option::Some(Task_oneof_definition::discloseRole(_)) = self.definition {
        } else {
            self.definition = ::std::option::Option::Some(Task_oneof_definition::discloseRole(Task_DiscloseRole::new()));
        }
        match self.definition {
            ::std::option::Option::Some(Task_oneof_definition::discloseRole(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_discloseRole(&mut self) -> Task_DiscloseRole {
        if self.has_discloseRole() {
            match self.definition.take() {
                ::std::option::Option::Some(Task_oneof_definition::discloseRole(v)) => v,
                _ => panic!(),
            }
        } else {
            Task_DiscloseRole::new()
        }
    }

    // .Task.Discuss discuss = 3;


    pub fn get_discuss(&self) -> &Task_Discuss {
        match self.definition {
            ::std::option::Option::Some(Task_oneof_definition::discuss(ref v)) => v,
            _ => <Task_Discuss as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_discuss(&mut self) {
        self.definition = ::std::option::Option::None;
    }

    pub fn has_discuss(&self) -> bool {
        match self.definition {
            ::std::option::Option::Some(Task_oneof_definition::discuss(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_discuss(&mut self, v: Task_Discuss) {
        self.definition = ::std::option::Option::Some(Task_oneof_definition::discuss(v))
    }

    // Mutable pointer to the field.
    pub fn mut_discuss(&mut self) -> &mut Task_Discuss {
        if let ::std::option::Option::Some(Task_oneof_definition::discuss(_)) = self.definition {
        } else {
            self.definition = ::std::option::Option::Some(Task_oneof_definition::discuss(Task_Discuss::new()));
        }
        match self.definition {
            ::std::option::Option::Some(Task_oneof_definition::discuss(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_discuss(&mut self) -> Task_Discuss {
        if self.has_discuss() {
            match self.definition.take() {
                ::std::option::Option::Some(Task_oneof_definition::discuss(v)) => v,
                _ => panic!(),
            }
        } else {
            Task_Discuss::new()
        }
    }

    // .Task.Vote vote = 4;


    pub fn get_vote(&self) -> &Task_Vote {
        match self.definition {
            ::std::option::Option::Some(Task_oneof_definition::vote(ref v)) => v,
            _ => <Task_Vote as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_vote(&mut self) {
        self.definition = ::std::option::Option::None;
    }

    pub fn has_vote(&self) -> bool {
        match self.definition {
            ::std::option::Option::Some(Task_oneof_definition::vote(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_vote(&mut self, v: Task_Vote) {
        self.definition = ::std::option::Option::Some(Task_oneof_definition::vote(v))
    }

    // Mutable pointer to the field.
    pub fn mut_vote(&mut self) -> &mut Task_Vote {
        if let ::std::option::Option::Some(Task_oneof_definition::vote(_)) = self.definition {
        } else {
            self.definition = ::std::option::Option::Some(Task_oneof_definition::vote(Task_Vote::new()));
        }
        match self.definition {
            ::std::option::Option::Some(Task_oneof_definition::vote(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_vote(&mut self) -> Task_Vote {
        if self.has_vote() {
            match self.definition.take() {
                ::std::option::Option::Some(Task_oneof_definition::vote(v)) => v,
                _ => panic!(),
            }
        } else {
            Task_Vote::new()
        }
    }
}

impl ::protobuf::Message for Task {
    fn is_initialized(&self) -> bool {
        if let Some(Task_oneof_definition::settings(ref v)) = self.definition {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Task_oneof_definition::discloseRole(ref v)) = self.definition {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Task_oneof_definition::discuss(ref v)) = self.definition {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Task_oneof_definition::vote(ref v)) = self.definition {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.definition = ::std::option::Option::Some(Task_oneof_definition::settings(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.definition = ::std::option::Option::Some(Task_oneof_definition::discloseRole(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.definition = ::std::option::Option::Some(Task_oneof_definition::discuss(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.definition = ::std::option::Option::Some(Task_oneof_definition::vote(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.definition {
            match v {
                &Task_oneof_definition::settings(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Task_oneof_definition::discloseRole(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Task_oneof_definition::discuss(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Task_oneof_definition::vote(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.definition {
            match v {
                &Task_oneof_definition::settings(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Task_oneof_definition::discloseRole(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Task_oneof_definition::discuss(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Task_oneof_definition::vote(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Task {
        Task::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Task_Settings>(
                "settings",
                Task::has_settings,
                Task::get_settings,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Task_DiscloseRole>(
                "discloseRole",
                Task::has_discloseRole,
                Task::get_discloseRole,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Task_Discuss>(
                "discuss",
                Task::has_discuss,
                Task::get_discuss,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Task_Vote>(
                "vote",
                Task::has_vote,
                Task::get_vote,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Task>(
                "Task",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Task {
        static instance: ::protobuf::rt::LazyV2<Task> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Task::new)
    }
}

impl ::protobuf::Clear for Task {
    fn clear(&mut self) {
        self.definition = ::std::option::Option::None;
        self.definition = ::std::option::Option::None;
        self.definition = ::std::option::Option::None;
        self.definition = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Task {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Task {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Task_Settings {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Task_Settings {
    fn default() -> &'a Task_Settings {
        <Task_Settings as ::protobuf::Message>::default_instance()
    }
}

impl Task_Settings {
    pub fn new() -> Task_Settings {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for Task_Settings {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Task_Settings {
        Task_Settings::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Task_Settings>(
                "Task.Settings",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Task_Settings {
        static instance: ::protobuf::rt::LazyV2<Task_Settings> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Task_Settings::new)
    }
}

impl ::protobuf::Clear for Task_Settings {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Task_Settings {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Task_Settings {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Task_DiscloseRole {
    // message fields
    pub role: ::protobuf::SingularPtrField<super::role::Role>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Task_DiscloseRole {
    fn default() -> &'a Task_DiscloseRole {
        <Task_DiscloseRole as ::protobuf::Message>::default_instance()
    }
}

impl Task_DiscloseRole {
    pub fn new() -> Task_DiscloseRole {
        ::std::default::Default::default()
    }

    // .Role role = 1;


    pub fn get_role(&self) -> &super::role::Role {
        self.role.as_ref().unwrap_or_else(|| <super::role::Role as ::protobuf::Message>::default_instance())
    }
    pub fn clear_role(&mut self) {
        self.role.clear();
    }

    pub fn has_role(&self) -> bool {
        self.role.is_some()
    }

    // Param is passed by value, moved
    pub fn set_role(&mut self, v: super::role::Role) {
        self.role = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_role(&mut self) -> &mut super::role::Role {
        if self.role.is_none() {
            self.role.set_default();
        }
        self.role.as_mut().unwrap()
    }

    // Take field
    pub fn take_role(&mut self) -> super::role::Role {
        self.role.take().unwrap_or_else(|| super::role::Role::new())
    }
}

impl ::protobuf::Message for Task_DiscloseRole {
    fn is_initialized(&self) -> bool {
        for v in &self.role {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.role)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.role.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.role.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Task_DiscloseRole {
        Task_DiscloseRole::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::role::Role>>(
                "role",
                |m: &Task_DiscloseRole| { &m.role },
                |m: &mut Task_DiscloseRole| { &mut m.role },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Task_DiscloseRole>(
                "Task.DiscloseRole",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Task_DiscloseRole {
        static instance: ::protobuf::rt::LazyV2<Task_DiscloseRole> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Task_DiscloseRole::new)
    }
}

impl ::protobuf::Clear for Task_DiscloseRole {
    fn clear(&mut self) {
        self.role.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Task_DiscloseRole {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Task_DiscloseRole {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Task_Discuss {
    // message fields
    pub time_limit: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Task_Discuss {
    fn default() -> &'a Task_Discuss {
        <Task_Discuss as ::protobuf::Message>::default_instance()
    }
}

impl Task_Discuss {
    pub fn new() -> Task_Discuss {
        ::std::default::Default::default()
    }

    // uint32 time_limit = 1;


    pub fn get_time_limit(&self) -> u32 {
        self.time_limit
    }
    pub fn clear_time_limit(&mut self) {
        self.time_limit = 0;
    }

    // Param is passed by value, moved
    pub fn set_time_limit(&mut self, v: u32) {
        self.time_limit = v;
    }
}

impl ::protobuf::Message for Task_Discuss {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.time_limit = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.time_limit != 0 {
            my_size += ::protobuf::rt::value_size(1, self.time_limit, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.time_limit != 0 {
            os.write_uint32(1, self.time_limit)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Task_Discuss {
        Task_Discuss::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "time_limit",
                |m: &Task_Discuss| { &m.time_limit },
                |m: &mut Task_Discuss| { &mut m.time_limit },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Task_Discuss>(
                "Task.Discuss",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Task_Discuss {
        static instance: ::protobuf::rt::LazyV2<Task_Discuss> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Task_Discuss::new)
    }
}

impl ::protobuf::Clear for Task_Discuss {
    fn clear(&mut self) {
        self.time_limit = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Task_Discuss {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Task_Discuss {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Task_Vote {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Task_Vote {
    fn default() -> &'a Task_Vote {
        <Task_Vote as ::protobuf::Message>::default_instance()
    }
}

impl Task_Vote {
    pub fn new() -> Task_Vote {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for Task_Vote {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Task_Vote {
        Task_Vote::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Task_Vote>(
                "Task.Vote",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Task_Vote {
        static instance: ::protobuf::rt::LazyV2<Task_Vote> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Task_Vote::new)
    }
}

impl ::protobuf::Clear for Task_Vote {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Task_Vote {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Task_Vote {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\ntask.proto\x1a\nrole.proto\"\xb2\x02\n\x04Task\x12,\n\x08settings\
    \x18\x01\x20\x01(\x0b2\x0e.Task.SettingsH\0R\x08settings\x128\n\x0cdiscl\
    oseRole\x18\x02\x20\x01(\x0b2\x12.Task.DiscloseRoleH\0R\x0cdiscloseRole\
    \x12)\n\x07discuss\x18\x03\x20\x01(\x0b2\r.Task.DiscussH\0R\x07discuss\
    \x12\x20\n\x04vote\x18\x04\x20\x01(\x0b2\n.Task.VoteH\0R\x04vote\x1a\n\n\
    \x08Settings\x1a)\n\x0cDiscloseRole\x12\x19\n\x04role\x18\x01\x20\x01(\
    \x0b2\x05.RoleR\x04role\x1a(\n\x07Discuss\x12\x1d\n\ntime_limit\x18\x01\
    \x20\x01(\rR\ttimeLimit\x1a\x06\n\x04VoteB\x0c\n\ndefinitionb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
