// This file is generated by rust-protobuf 2.20.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `player.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_20_0;

#[derive(PartialEq,Clone,Default)]
pub struct Player {
    // message fields
    pub id: ::std::string::String,
    pub name: ::std::string::String,
    pub credits: u32,
    pub position: u32,
    pub cards_count: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Player {
    fn default() -> &'a Player {
        <Player as ::protobuf::Message>::default_instance()
    }
}

impl Player {
    pub fn new() -> Player {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // uint32 credits = 3;


    pub fn get_credits(&self) -> u32 {
        self.credits
    }
    pub fn clear_credits(&mut self) {
        self.credits = 0;
    }

    // Param is passed by value, moved
    pub fn set_credits(&mut self, v: u32) {
        self.credits = v;
    }

    // uint32 position = 4;


    pub fn get_position(&self) -> u32 {
        self.position
    }
    pub fn clear_position(&mut self) {
        self.position = 0;
    }

    // Param is passed by value, moved
    pub fn set_position(&mut self, v: u32) {
        self.position = v;
    }

    // uint32 cards_count = 5;


    pub fn get_cards_count(&self) -> u32 {
        self.cards_count
    }
    pub fn clear_cards_count(&mut self) {
        self.cards_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_cards_count(&mut self, v: u32) {
        self.cards_count = v;
    }
}

impl ::protobuf::Message for Player {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.credits = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.position = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.cards_count = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if self.credits != 0 {
            my_size += ::protobuf::rt::value_size(3, self.credits, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.position != 0 {
            my_size += ::protobuf::rt::value_size(4, self.position, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.cards_count != 0 {
            my_size += ::protobuf::rt::value_size(5, self.cards_count, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if self.credits != 0 {
            os.write_uint32(3, self.credits)?;
        }
        if self.position != 0 {
            os.write_uint32(4, self.position)?;
        }
        if self.cards_count != 0 {
            os.write_uint32(5, self.cards_count)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Player {
        Player::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &Player| { &m.id },
                |m: &mut Player| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Player| { &m.name },
                |m: &mut Player| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "credits",
                |m: &Player| { &m.credits },
                |m: &mut Player| { &mut m.credits },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "position",
                |m: &Player| { &m.position },
                |m: &mut Player| { &mut m.position },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "cards_count",
                |m: &Player| { &m.cards_count },
                |m: &mut Player| { &mut m.cards_count },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Player>(
                "Player",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Player {
        static instance: ::protobuf::rt::LazyV2<Player> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Player::new)
    }
}

impl ::protobuf::Clear for Player {
    fn clear(&mut self) {
        self.id.clear();
        self.name.clear();
        self.credits = 0;
        self.position = 0;
        self.cards_count = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Player {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Player {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct OwnPlayer {
    // message fields
    pub id: ::std::string::String,
    pub name: ::std::string::String,
    pub open_tasks: ::protobuf::RepeatedField<super::task::Task>,
    pub credits: u32,
    pub cards: ::protobuf::RepeatedField<super::card::Card>,
    pub position: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OwnPlayer {
    fn default() -> &'a OwnPlayer {
        <OwnPlayer as ::protobuf::Message>::default_instance()
    }
}

impl OwnPlayer {
    pub fn new() -> OwnPlayer {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // repeated .Task open_tasks = 3;


    pub fn get_open_tasks(&self) -> &[super::task::Task] {
        &self.open_tasks
    }
    pub fn clear_open_tasks(&mut self) {
        self.open_tasks.clear();
    }

    // Param is passed by value, moved
    pub fn set_open_tasks(&mut self, v: ::protobuf::RepeatedField<super::task::Task>) {
        self.open_tasks = v;
    }

    // Mutable pointer to the field.
    pub fn mut_open_tasks(&mut self) -> &mut ::protobuf::RepeatedField<super::task::Task> {
        &mut self.open_tasks
    }

    // Take field
    pub fn take_open_tasks(&mut self) -> ::protobuf::RepeatedField<super::task::Task> {
        ::std::mem::replace(&mut self.open_tasks, ::protobuf::RepeatedField::new())
    }

    // uint32 credits = 4;


    pub fn get_credits(&self) -> u32 {
        self.credits
    }
    pub fn clear_credits(&mut self) {
        self.credits = 0;
    }

    // Param is passed by value, moved
    pub fn set_credits(&mut self, v: u32) {
        self.credits = v;
    }

    // repeated .Card cards = 5;


    pub fn get_cards(&self) -> &[super::card::Card] {
        &self.cards
    }
    pub fn clear_cards(&mut self) {
        self.cards.clear();
    }

    // Param is passed by value, moved
    pub fn set_cards(&mut self, v: ::protobuf::RepeatedField<super::card::Card>) {
        self.cards = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cards(&mut self) -> &mut ::protobuf::RepeatedField<super::card::Card> {
        &mut self.cards
    }

    // Take field
    pub fn take_cards(&mut self) -> ::protobuf::RepeatedField<super::card::Card> {
        ::std::mem::replace(&mut self.cards, ::protobuf::RepeatedField::new())
    }

    // uint32 position = 6;


    pub fn get_position(&self) -> u32 {
        self.position
    }
    pub fn clear_position(&mut self) {
        self.position = 0;
    }

    // Param is passed by value, moved
    pub fn set_position(&mut self, v: u32) {
        self.position = v;
    }
}

impl ::protobuf::Message for OwnPlayer {
    fn is_initialized(&self) -> bool {
        for v in &self.open_tasks {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.cards {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.open_tasks)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.credits = tmp;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cards)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.position = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        for value in &self.open_tasks {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.credits != 0 {
            my_size += ::protobuf::rt::value_size(4, self.credits, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.cards {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.position != 0 {
            my_size += ::protobuf::rt::value_size(6, self.position, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        for v in &self.open_tasks {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.credits != 0 {
            os.write_uint32(4, self.credits)?;
        }
        for v in &self.cards {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.position != 0 {
            os.write_uint32(6, self.position)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OwnPlayer {
        OwnPlayer::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &OwnPlayer| { &m.id },
                |m: &mut OwnPlayer| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &OwnPlayer| { &m.name },
                |m: &mut OwnPlayer| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::task::Task>>(
                "open_tasks",
                |m: &OwnPlayer| { &m.open_tasks },
                |m: &mut OwnPlayer| { &mut m.open_tasks },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "credits",
                |m: &OwnPlayer| { &m.credits },
                |m: &mut OwnPlayer| { &mut m.credits },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::card::Card>>(
                "cards",
                |m: &OwnPlayer| { &m.cards },
                |m: &mut OwnPlayer| { &mut m.cards },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "position",
                |m: &OwnPlayer| { &m.position },
                |m: &mut OwnPlayer| { &mut m.position },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<OwnPlayer>(
                "OwnPlayer",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static OwnPlayer {
        static instance: ::protobuf::rt::LazyV2<OwnPlayer> = ::protobuf::rt::LazyV2::INIT;
        instance.get(OwnPlayer::new)
    }
}

impl ::protobuf::Clear for OwnPlayer {
    fn clear(&mut self) {
        self.id.clear();
        self.name.clear();
        self.open_tasks.clear();
        self.credits = 0;
        self.cards.clear();
        self.position = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OwnPlayer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OwnPlayer {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0cplayer.proto\x1a\ntask.proto\x1a\ncard.proto\"\x83\x01\n\x06Player\
    \x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12\x12\n\x04name\x18\x02\x20\
    \x01(\tR\x04name\x12\x18\n\x07credits\x18\x03\x20\x01(\rR\x07credits\x12\
    \x1a\n\x08position\x18\x04\x20\x01(\rR\x08position\x12\x1f\n\x0bcards_co\
    unt\x18\x05\x20\x01(\rR\ncardsCount\"\xa8\x01\n\tOwnPlayer\x12\x0e\n\x02\
    id\x18\x01\x20\x01(\tR\x02id\x12\x12\n\x04name\x18\x02\x20\x01(\tR\x04na\
    me\x12$\n\nopen_tasks\x18\x03\x20\x03(\x0b2\x05.TaskR\topenTasks\x12\x18\
    \n\x07credits\x18\x04\x20\x01(\rR\x07credits\x12\x1b\n\x05cards\x18\x05\
    \x20\x03(\x0b2\x05.CardR\x05cards\x12\x1a\n\x08position\x18\x06\x20\x01(\
    \rR\x08positionJ\xd1\x05\n\x06\x12\x04\0\0\x14\x01\n\x08\n\x01\x0c\x12\
    \x03\0\0\x12\n\t\n\x02\x03\0\x12\x03\x02\0\x14\n\t\n\x02\x03\x01\x12\x03\
    \x03\0\x14\n\n\n\x02\x04\0\x12\x04\x05\0\x0b\x01\n\n\n\x03\x04\0\x01\x12\
    \x03\x05\x08\x0e\n\x0b\n\x04\x04\0\x02\0\x12\x03\x06\x02\x10\n\x0c\n\x05\
    \x04\0\x02\0\x05\x12\x03\x06\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\
    \x06\t\x0b\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x06\x0e\x0f\n\x0b\n\x04\
    \x04\0\x02\x01\x12\x03\x07\x02\x12\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\
    \x07\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x07\t\r\n\x0c\n\x05\
    \x04\0\x02\x01\x03\x12\x03\x07\x10\x11\n\x0b\n\x04\x04\0\x02\x02\x12\x03\
    \x08\x02\x15\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x08\x02\x08\n\x0c\n\
    \x05\x04\0\x02\x02\x01\x12\x03\x08\t\x10\n\x0c\n\x05\x04\0\x02\x02\x03\
    \x12\x03\x08\x13\x14\n\x0b\n\x04\x04\0\x02\x03\x12\x03\t\x02\x16\n\x0c\n\
    \x05\x04\0\x02\x03\x05\x12\x03\t\x02\x08\n\x0c\n\x05\x04\0\x02\x03\x01\
    \x12\x03\t\t\x11\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\t\x14\x15\n\x0b\n\
    \x04\x04\0\x02\x04\x12\x03\n\x02\x19\n\x0c\n\x05\x04\0\x02\x04\x05\x12\
    \x03\n\x02\x08\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\n\t\x14\n\x0c\n\x05\
    \x04\0\x02\x04\x03\x12\x03\n\x17\x18\n\n\n\x02\x04\x01\x12\x04\r\0\x14\
    \x01\n\n\n\x03\x04\x01\x01\x12\x03\r\x08\x11\n\x0b\n\x04\x04\x01\x02\0\
    \x12\x03\x0e\x02\x10\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x0e\x02\x08\n\
    \x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x0e\t\x0b\n\x0c\n\x05\x04\x01\x02\0\
    \x03\x12\x03\x0e\x0e\x0f\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x0f\x02\x12\
    \n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x0f\x02\x08\n\x0c\n\x05\x04\x01\
    \x02\x01\x01\x12\x03\x0f\t\r\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x0f\
    \x10\x11\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\x10\x02\x1f\n\x0c\n\x05\x04\
    \x01\x02\x02\x04\x12\x03\x10\x02\n\n\x0c\n\x05\x04\x01\x02\x02\x06\x12\
    \x03\x10\x0b\x0f\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\x10\x10\x1a\n\
    \x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\x10\x1d\x1e\n\x0b\n\x04\x04\x01\
    \x02\x03\x12\x03\x11\x02\x15\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\x03\x11\
    \x02\x08\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03\x11\t\x10\n\x0c\n\x05\
    \x04\x01\x02\x03\x03\x12\x03\x11\x13\x14\n\x0b\n\x04\x04\x01\x02\x04\x12\
    \x03\x12\x02\x1a\n\x0c\n\x05\x04\x01\x02\x04\x04\x12\x03\x12\x02\n\n\x0c\
    \n\x05\x04\x01\x02\x04\x06\x12\x03\x12\x0b\x0f\n\x0c\n\x05\x04\x01\x02\
    \x04\x01\x12\x03\x12\x10\x15\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\x03\x12\
    \x18\x19\n\x0b\n\x04\x04\x01\x02\x05\x12\x03\x13\x02\x16\n\x0c\n\x05\x04\
    \x01\x02\x05\x05\x12\x03\x13\x02\x08\n\x0c\n\x05\x04\x01\x02\x05\x01\x12\
    \x03\x13\t\x11\n\x0c\n\x05\x04\x01\x02\x05\x03\x12\x03\x13\x14\x15b\x06p\
    roto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
